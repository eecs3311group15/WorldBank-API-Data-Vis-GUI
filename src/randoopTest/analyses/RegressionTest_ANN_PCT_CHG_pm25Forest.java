package analyses;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest_ANN_PCT_CHG_pm25Forest {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass2 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.lang.Class<?> wildcardClass1 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.ArrayList<viewers.Viewer> viewerList6 = null;
        // The following exception was thrown during execution in test generation
        try {
            aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        java.lang.Class<?> wildcardClass10 = viewerList7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.lang.Class<?> wildcardClass5 = viewerList2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean2 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass3 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass2 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        viewers.Viewer[] viewerArray8 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList9 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList9, viewerArray8);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList9);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList9);
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass8 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass13 = strMap12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        java.lang.Class<?> wildcardClass16 = viewerList12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass8 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass14 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.lang.Class<?> wildcardClass25 = viewerList20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass12 = strMap11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        java.lang.Class<?> wildcardClass39 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap2 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean3 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass4 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        boolean boolean5 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass4 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass14 = strMap13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean25 = aNN_PCT_CHG_pm25Forest14.hasData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest28 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList30);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest21 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList23);
        java.lang.Class<?> wildcardClass28 = viewerList23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass27 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        java.lang.Class<?> wildcardClass16 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass40 = strMap39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass9 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass2 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass6 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass9 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        java.lang.Class<?> wildcardClass41 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.ArrayList<viewers.Viewer> viewerList3 = null;
        // The following exception was thrown during execution in test generation
        try {
            aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.lang.Class<?> wildcardClass70 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass2 = strMap1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest35 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest35.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList37);
        java.lang.Class<?> wildcardClass43 = viewerList37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        java.lang.Class<?> wildcardClass18 = viewerList15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap2 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass3 = strMap2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray8 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList9 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList9, viewerArray8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList9);
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean15 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass16 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest35 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest35.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList37);
        java.lang.Class<?> wildcardClass43 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest21 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList23);
        java.lang.Class<?> wildcardClass28 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass40 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass16 = strMap15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap10 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest19 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList21);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList27);
        boolean boolean31 = aNN_PCT_CHG_pm25Forest19.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest33.displayData();
        boolean boolean44 = aNN_PCT_CHG_pm25Forest33.hasData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList54);
        java.lang.Class<?> wildcardClass60 = viewerList54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList10);
        boolean boolean14 = aNN_PCT_CHG_pm25Forest2.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest16.hasData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        java.lang.Class<?> wildcardClass25 = viewerList21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        boolean boolean33 = aNN_PCT_CHG_pm25Forest27.hasData();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest21 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList23);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean29 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList27);
        boolean boolean31 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest13.hasData();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass37 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        aNN_PCT_CHG_pm25Forest13.displayData();
        aNN_PCT_CHG_pm25Forest13.displayData();
        aNN_PCT_CHG_pm25Forest13.displayData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest28 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList30);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest28.displayData();
        aNN_PCT_CHG_pm25Forest28.displayData();
        aNN_PCT_CHG_pm25Forest28.displayData();
        boolean boolean41 = aNN_PCT_CHG_pm25Forest28.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap47 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest42.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest59 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap6 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass9 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass14 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass71 = strMap70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass7 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass14 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        viewers.Viewer[] viewerArray8 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList9 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList9, viewerArray8);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList9);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList9);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.ArrayList<viewers.Viewer> viewerList15 = null;
        // The following exception was thrown during execution in test generation
        try {
            aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass26 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean20 = aNN_PCT_CHG_pm25Forest14.hasData();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList22);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        boolean boolean32 = aNN_PCT_CHG_pm25Forest26.hasData();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass18 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList33);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean39 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        boolean boolean50 = aNN_PCT_CHG_pm25Forest40.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest53.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest64 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray65 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList66 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList66, viewerArray65);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList66);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap69 = aNN_PCT_CHG_pm25Forest64.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList72);
        java.lang.Class<?> wildcardClass80 = viewerList72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        java.lang.Class<?> wildcardClass24 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        java.lang.Class<?> wildcardClass38 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest13.hasData();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList31);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest36 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest36.updateObservers(viewerList38);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest36.getCompatibility();
        viewers.Viewer[] viewerArray42 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList43 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList43, viewerArray42);
        aNN_PCT_CHG_pm25Forest36.updateObservers(viewerList43);
        aNN_PCT_CHG_pm25Forest36.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest49 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray50 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList51 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList51, viewerArray50);
        aNN_PCT_CHG_pm25Forest49.updateObservers(viewerList51);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap54 = aNN_PCT_CHG_pm25Forest49.getCompatibility();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest49.updateObservers(viewerList56);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList56);
        aNN_PCT_CHG_pm25Forest36.updateObservers(viewerList56);
        boolean boolean61 = aNN_PCT_CHG_pm25Forest36.hasData();
        boolean boolean62 = aNN_PCT_CHG_pm25Forest36.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest63 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray64 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList65 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList65, viewerArray64);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList65);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap68 = aNN_PCT_CHG_pm25Forest63.getCompatibility();
        viewers.Viewer[] viewerArray69 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList70 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList70, viewerArray69);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList70);
        aNN_PCT_CHG_pm25Forest63.displayData();
        boolean boolean74 = aNN_PCT_CHG_pm25Forest63.hasData();
        aNN_PCT_CHG_pm25Forest63.displayData();
        aNN_PCT_CHG_pm25Forest63.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest77 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest77.updateObservers(viewerList79);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap82 = aNN_PCT_CHG_pm25Forest77.getCompatibility();
        viewers.Viewer[] viewerArray83 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList84 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList84, viewerArray83);
        aNN_PCT_CHG_pm25Forest77.updateObservers(viewerList84);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList84);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest88 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray89 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList90 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList90, viewerArray89);
        aNN_PCT_CHG_pm25Forest88.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest36.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList90);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap96 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass19 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest3 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray4 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList5 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList5, viewerArray4);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList5);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap8 = aNN_PCT_CHG_pm25Forest3.getCompatibility();
        aNN_PCT_CHG_pm25Forest3.displayData();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest3.hasData();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        java.lang.Class<?> wildcardClass16 = viewerList12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.lang.Class<?> wildcardClass70 = viewerList62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass10 = strMap9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap55 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass3 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        boolean boolean5 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest6.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList14);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest6.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest6.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest20 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList22);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest20.getCompatibility();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest20.displayData();
        boolean boolean31 = aNN_PCT_CHG_pm25Forest20.hasData();
        aNN_PCT_CHG_pm25Forest20.displayData();
        aNN_PCT_CHG_pm25Forest20.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest34 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList36);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest34.getCompatibility();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList41);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        boolean boolean57 = aNN_PCT_CHG_pm25Forest47.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest60.getCompatibility();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest60.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest71 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray72 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList73 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList73, viewerArray72);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList73);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap76 = aNN_PCT_CHG_pm25Forest71.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest77 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest77.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList79);
        java.lang.Class<?> wildcardClass86 = viewerList79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap55 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass56 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest25.hasData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList46);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest51.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest66 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList68);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest66.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList74);
        boolean boolean80 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean81 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean82 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass32 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean29 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest36 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest36.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList38);
        java.lang.Class<?> wildcardClass44 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass11 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap2 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean3 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap4 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean9 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean15 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass12 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest32 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList34);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        aNN_PCT_CHG_pm25Forest40.displayData();
        aNN_PCT_CHG_pm25Forest40.displayData();
        aNN_PCT_CHG_pm25Forest40.displayData();
        aNN_PCT_CHG_pm25Forest40.displayData();
        boolean boolean54 = aNN_PCT_CHG_pm25Forest40.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest55 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray56 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList57 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList57, viewerArray56);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList57);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap60 = aNN_PCT_CHG_pm25Forest55.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest61 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList63);
        boolean boolean67 = aNN_PCT_CHG_pm25Forest55.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap68 = aNN_PCT_CHG_pm25Forest55.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest69 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray70 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList71 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList71, viewerArray70);
        aNN_PCT_CHG_pm25Forest69.updateObservers(viewerList71);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap74 = aNN_PCT_CHG_pm25Forest69.getCompatibility();
        viewers.Viewer[] viewerArray75 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList76 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList76, viewerArray75);
        aNN_PCT_CHG_pm25Forest69.updateObservers(viewerList76);
        aNN_PCT_CHG_pm25Forest69.displayData();
        boolean boolean80 = aNN_PCT_CHG_pm25Forest69.hasData();
        aNN_PCT_CHG_pm25Forest69.displayData();
        aNN_PCT_CHG_pm25Forest69.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest83 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray84 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList85 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList85, viewerArray84);
        aNN_PCT_CHG_pm25Forest83.updateObservers(viewerList85);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap88 = aNN_PCT_CHG_pm25Forest83.getCompatibility();
        viewers.Viewer[] viewerArray89 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList90 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList90, viewerArray89);
        aNN_PCT_CHG_pm25Forest83.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest69.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest25.hasData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList46);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest51.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest66 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList68);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest66.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList74);
        boolean boolean80 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap81 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        boolean boolean24 = aNN_PCT_CHG_pm25Forest13.hasData();
        aNN_PCT_CHG_pm25Forest13.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest13.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean15 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean71 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean72 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass73 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray12 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList13 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList13, viewerArray12);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList13);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest8.getCompatibility();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList15);
        aNN_PCT_CHG_pm25Forest8.displayData();
        aNN_PCT_CHG_pm25Forest8.displayData();
        aNN_PCT_CHG_pm25Forest8.displayData();
        aNN_PCT_CHG_pm25Forest8.displayData();
        boolean boolean22 = aNN_PCT_CHG_pm25Forest8.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest23 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray24 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList25 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList25, viewerArray24);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList25);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap6 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList17);
        boolean boolean20 = aNN_PCT_CHG_pm25Forest10.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap22 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest23 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray24 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList25 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList25, viewerArray24);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList25);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList30);
        aNN_PCT_CHG_pm25Forest23.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest34 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList36);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest34.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList42);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList42);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList42);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest48 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList50);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap53 = aNN_PCT_CHG_pm25Forest48.getCompatibility();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList55);
        aNN_PCT_CHG_pm25Forest48.displayData();
        aNN_PCT_CHG_pm25Forest48.displayData();
        aNN_PCT_CHG_pm25Forest48.displayData();
        boolean boolean61 = aNN_PCT_CHG_pm25Forest48.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest62 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray63 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList64 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList64, viewerArray63);
        aNN_PCT_CHG_pm25Forest62.updateObservers(viewerList64);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap67 = aNN_PCT_CHG_pm25Forest62.getCompatibility();
        viewers.Viewer[] viewerArray68 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList69 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList69, viewerArray68);
        aNN_PCT_CHG_pm25Forest62.updateObservers(viewerList69);
        aNN_PCT_CHG_pm25Forest62.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest73 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray74 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList75 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList75, viewerArray74);
        aNN_PCT_CHG_pm25Forest73.updateObservers(viewerList75);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap78 = aNN_PCT_CHG_pm25Forest73.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest79 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray80 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList81 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList81, viewerArray80);
        aNN_PCT_CHG_pm25Forest79.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest73.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest62.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean2 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest4 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray5 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList6 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList6, viewerArray5);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList6);
        boolean boolean9 = aNN_PCT_CHG_pm25Forest4.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList18);
        boolean boolean22 = aNN_PCT_CHG_pm25Forest10.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap23 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest24.displayData();
        boolean boolean35 = aNN_PCT_CHG_pm25Forest24.hasData();
        aNN_PCT_CHG_pm25Forest24.displayData();
        aNN_PCT_CHG_pm25Forest24.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean71 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        boolean boolean25 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest27.displayData();
        boolean boolean38 = aNN_PCT_CHG_pm25Forest27.hasData();
        aNN_PCT_CHG_pm25Forest27.displayData();
        aNN_PCT_CHG_pm25Forest27.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest41 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray42 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList43 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList43, viewerArray42);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList43);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap46 = aNN_PCT_CHG_pm25Forest41.getCompatibility();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList48);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest52 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList54);
        java.lang.Class<?> wildcardClass59 = viewerList54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap75 = aNN_PCT_CHG_pm25Forest70.getCompatibility();
        aNN_PCT_CHG_pm25Forest70.displayData();
        aNN_PCT_CHG_pm25Forest70.displayData();
        boolean boolean78 = aNN_PCT_CHG_pm25Forest70.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap79 = aNN_PCT_CHG_pm25Forest70.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest80 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray81 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList82 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList82, viewerArray81);
        aNN_PCT_CHG_pm25Forest80.updateObservers(viewerList82);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList82);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap10 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest9 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray10 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList11 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList11, viewerArray10);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList11);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest9.getCompatibility();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList16);
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        boolean boolean23 = aNN_PCT_CHG_pm25Forest9.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest39.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest50 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest50.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest52 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList54);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap57 = aNN_PCT_CHG_pm25Forest52.getCompatibility();
        viewers.Viewer[] viewerArray58 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList59 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList59, viewerArray58);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList59);
        aNN_PCT_CHG_pm25Forest50.updateObservers(viewerList59);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList59);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList59);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass16 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass17 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        java.lang.Class<?> wildcardClass18 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean25 = aNN_PCT_CHG_pm25Forest14.hasData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest28 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList30);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList35);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest39.displayData();
        boolean boolean50 = aNN_PCT_CHG_pm25Forest39.hasData();
        aNN_PCT_CHG_pm25Forest39.displayData();
        aNN_PCT_CHG_pm25Forest39.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        aNN_PCT_CHG_pm25Forest24.displayData();
        aNN_PCT_CHG_pm25Forest24.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest32 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList34);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap37 = aNN_PCT_CHG_pm25Forest32.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList40);
        boolean boolean44 = aNN_PCT_CHG_pm25Forest32.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest32.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest46.getCompatibility();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList53);
        aNN_PCT_CHG_pm25Forest46.displayData();
        boolean boolean57 = aNN_PCT_CHG_pm25Forest46.hasData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest60.getCompatibility();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest25.hasData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList46);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest51.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest66 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList68);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest66.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList74);
        java.lang.Class<?> wildcardClass80 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray12 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList13 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList13, viewerArray12);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList13);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean23 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        boolean boolean39 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean71 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean72 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        boolean boolean5 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap6 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass11 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        aNN_PCT_CHG_pm25Forest38.displayData();
        boolean boolean45 = aNN_PCT_CHG_pm25Forest38.hasData();
        boolean boolean46 = aNN_PCT_CHG_pm25Forest38.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest47.displayData();
        aNN_PCT_CHG_pm25Forest47.displayData();
        aNN_PCT_CHG_pm25Forest47.displayData();
        aNN_PCT_CHG_pm25Forest47.displayData();
        boolean boolean61 = aNN_PCT_CHG_pm25Forest47.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest62 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray63 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList64 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList64, viewerArray63);
        aNN_PCT_CHG_pm25Forest62.updateObservers(viewerList64);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap67 = aNN_PCT_CHG_pm25Forest62.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest68 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray69 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList70 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList70, viewerArray69);
        aNN_PCT_CHG_pm25Forest68.updateObservers(viewerList70);
        aNN_PCT_CHG_pm25Forest62.updateObservers(viewerList70);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList70);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList70);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList70);
        java.lang.Class<?> wildcardClass77 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap55 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean56 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap57 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest15.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        aNN_PCT_CHG_pm25Forest15.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest30.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest41 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray42 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList43 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList43, viewerArray42);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList43);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap46 = aNN_PCT_CHG_pm25Forest41.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean15 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList27);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest31.getCompatibility();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList38);
        java.lang.Class<?> wildcardClass42 = viewerList38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest15.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList48);
        java.lang.Class<?> wildcardClass55 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest12.hasData();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass25 = strMap24.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap26 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest14.hasData();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList29);
        boolean boolean32 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList41);
        boolean boolean45 = aNN_PCT_CHG_pm25Forest33.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap46 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest47.displayData();
        boolean boolean58 = aNN_PCT_CHG_pm25Forest47.hasData();
        aNN_PCT_CHG_pm25Forest47.displayData();
        aNN_PCT_CHG_pm25Forest47.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest61 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList63);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap66 = aNN_PCT_CHG_pm25Forest61.getCompatibility();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList68);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList68);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList68);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList68);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList68);
        boolean boolean75 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest21 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList23);
        boolean boolean27 = aNN_PCT_CHG_pm25Forest15.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean40 = aNN_PCT_CHG_pm25Forest29.hasData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList50);
        java.lang.Class<?> wildcardClass56 = viewerList50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList33);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean39 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        boolean boolean50 = aNN_PCT_CHG_pm25Forest40.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest53.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest64 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray65 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList66 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList66, viewerArray65);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList66);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap69 = aNN_PCT_CHG_pm25Forest64.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList72);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest80 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray81 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList82 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList82, viewerArray81);
        aNN_PCT_CHG_pm25Forest80.updateObservers(viewerList82);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap85 = aNN_PCT_CHG_pm25Forest80.getCompatibility();
        boolean boolean86 = aNN_PCT_CHG_pm25Forest80.hasData();
        viewers.Viewer[] viewerArray87 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList88 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList88, viewerArray87);
        aNN_PCT_CHG_pm25Forest80.updateObservers(viewerList88);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray12 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList13 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList13, viewerArray12);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList13);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest17 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        boolean boolean24 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        boolean boolean5 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest6.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList14);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest6.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest6.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest20 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList22);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest20.getCompatibility();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest20.displayData();
        boolean boolean31 = aNN_PCT_CHG_pm25Forest20.hasData();
        aNN_PCT_CHG_pm25Forest20.displayData();
        aNN_PCT_CHG_pm25Forest20.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest34 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList36);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest34.getCompatibility();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList41);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        boolean boolean57 = aNN_PCT_CHG_pm25Forest47.hasData();
        boolean boolean58 = aNN_PCT_CHG_pm25Forest47.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest59 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList61);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap64 = aNN_PCT_CHG_pm25Forest59.getCompatibility();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest59.hasData();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList67);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest59.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest71 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray72 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList73 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList73, viewerArray72);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList73);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap76 = aNN_PCT_CHG_pm25Forest71.getCompatibility();
        boolean boolean77 = aNN_PCT_CHG_pm25Forest71.hasData();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList79);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest83 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray84 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList85 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList85, viewerArray84);
        aNN_PCT_CHG_pm25Forest83.updateObservers(viewerList85);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList85);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList85);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass16 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean2 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap3 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass4 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest17 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap22 = aNN_PCT_CHG_pm25Forest17.getCompatibility();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList24);
        aNN_PCT_CHG_pm25Forest17.displayData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        boolean boolean29 = aNN_PCT_CHG_pm25Forest17.hasData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest31.getCompatibility();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        boolean boolean45 = aNN_PCT_CHG_pm25Forest31.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest46.getCompatibility();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList53);
        aNN_PCT_CHG_pm25Forest46.displayData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        boolean boolean59 = aNN_PCT_CHG_pm25Forest46.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest60.getCompatibility();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest60.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest71 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray72 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList73 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList73, viewerArray72);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList73);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap76 = aNN_PCT_CHG_pm25Forest71.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest77 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest77.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList79);
        boolean boolean88 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean89 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList10);
        boolean boolean14 = aNN_PCT_CHG_pm25Forest2.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest16.hasData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList37);
        boolean boolean43 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean44 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest19 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList21);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList27);
        boolean boolean31 = aNN_PCT_CHG_pm25Forest19.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest33.displayData();
        boolean boolean44 = aNN_PCT_CHG_pm25Forest33.hasData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap61 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean25 = aNN_PCT_CHG_pm25Forest14.hasData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest27.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList47);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList47);
        boolean boolean52 = aNN_PCT_CHG_pm25Forest27.hasData();
        boolean boolean53 = aNN_PCT_CHG_pm25Forest27.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList61);
        boolean boolean64 = aNN_PCT_CHG_pm25Forest54.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap66 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest67 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray68 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList69 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList69, viewerArray68);
        aNN_PCT_CHG_pm25Forest67.updateObservers(viewerList69);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap72 = aNN_PCT_CHG_pm25Forest67.getCompatibility();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest67.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest67.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest78 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray79 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList80 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList80, viewerArray79);
        aNN_PCT_CHG_pm25Forest78.updateObservers(viewerList80);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap83 = aNN_PCT_CHG_pm25Forest78.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest84 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray85 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList86 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList86, viewerArray85);
        aNN_PCT_CHG_pm25Forest84.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest78.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest67.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList86);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass14 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean25 = aNN_PCT_CHG_pm25Forest14.hasData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest28 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList30);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList35);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest39.displayData();
        boolean boolean50 = aNN_PCT_CHG_pm25Forest39.hasData();
        aNN_PCT_CHG_pm25Forest39.displayData();
        aNN_PCT_CHG_pm25Forest39.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList60);
        java.lang.Class<?> wildcardClass66 = viewerList60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean20 = aNN_PCT_CHG_pm25Forest14.hasData();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        aNN_PCT_CHG_pm25Forest27.displayData();
        aNN_PCT_CHG_pm25Forest27.displayData();
        boolean boolean35 = aNN_PCT_CHG_pm25Forest27.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest3 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray4 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList5 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList5, viewerArray4);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList5);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap8 = aNN_PCT_CHG_pm25Forest3.getCompatibility();
        aNN_PCT_CHG_pm25Forest3.displayData();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest3.hasData();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest9 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray10 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList11 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList11, viewerArray10);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList11);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest9.getCompatibility();
        aNN_PCT_CHG_pm25Forest9.displayData();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest9.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest17 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap22 = aNN_PCT_CHG_pm25Forest17.getCompatibility();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList24);
        aNN_PCT_CHG_pm25Forest17.displayData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest30.hasData();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList38);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest41 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray42 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList43 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList43, viewerArray42);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList43);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap46 = aNN_PCT_CHG_pm25Forest41.getCompatibility();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap53 = aNN_PCT_CHG_pm25Forest17.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest54.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest54.hasData();
        aNN_PCT_CHG_pm25Forest54.displayData();
        aNN_PCT_CHG_pm25Forest54.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest68 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray69 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList70 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList70, viewerArray69);
        aNN_PCT_CHG_pm25Forest68.updateObservers(viewerList70);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap73 = aNN_PCT_CHG_pm25Forest68.getCompatibility();
        viewers.Viewer[] viewerArray74 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList75 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList75, viewerArray74);
        aNN_PCT_CHG_pm25Forest68.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        boolean boolean25 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest38.displayData();
        aNN_PCT_CHG_pm25Forest38.displayData();
        aNN_PCT_CHG_pm25Forest38.displayData();
        boolean boolean51 = aNN_PCT_CHG_pm25Forest38.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest52 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList54);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap57 = aNN_PCT_CHG_pm25Forest52.getCompatibility();
        viewers.Viewer[] viewerArray58 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList59 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList59, viewerArray58);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList59);
        aNN_PCT_CHG_pm25Forest52.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest63 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray64 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList65 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList65, viewerArray64);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList65);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap68 = aNN_PCT_CHG_pm25Forest63.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest69 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray70 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList71 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList71, viewerArray70);
        aNN_PCT_CHG_pm25Forest69.updateObservers(viewerList71);
        aNN_PCT_CHG_pm25Forest63.updateObservers(viewerList71);
        aNN_PCT_CHG_pm25Forest52.updateObservers(viewerList71);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList71);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList71);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean79 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean81 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest25.hasData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList46);
        java.lang.Class<?> wildcardClass51 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        aNN_PCT_CHG_pm25Forest13.displayData();
        boolean boolean20 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean21 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest22 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest22.updateObservers(viewerList24);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest22.getCompatibility();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest22.updateObservers(viewerList29);
        aNN_PCT_CHG_pm25Forest22.displayData();
        aNN_PCT_CHG_pm25Forest22.displayData();
        aNN_PCT_CHG_pm25Forest22.displayData();
        aNN_PCT_CHG_pm25Forest22.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest22.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap42 = aNN_PCT_CHG_pm25Forest37.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest22.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean15 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest12.hasData();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList33);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean39 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        boolean boolean50 = aNN_PCT_CHG_pm25Forest40.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest53.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest64 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray65 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList66 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList66, viewerArray65);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList66);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap69 = aNN_PCT_CHG_pm25Forest64.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList72);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest80 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray81 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList82 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList82, viewerArray81);
        aNN_PCT_CHG_pm25Forest80.updateObservers(viewerList82);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap85 = aNN_PCT_CHG_pm25Forest80.getCompatibility();
        aNN_PCT_CHG_pm25Forest80.displayData();
        aNN_PCT_CHG_pm25Forest80.displayData();
        boolean boolean88 = aNN_PCT_CHG_pm25Forest80.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap89 = aNN_PCT_CHG_pm25Forest80.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest90 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray91 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList92 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList92, viewerArray91);
        aNN_PCT_CHG_pm25Forest90.updateObservers(viewerList92);
        aNN_PCT_CHG_pm25Forest80.updateObservers(viewerList92);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        viewers.Viewer[] viewerArray8 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList9 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList9, viewerArray8);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList9);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList9);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        viewers.Viewer[] viewerArray8 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList9 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList9, viewerArray8);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList9);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList9);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap42 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest18 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest18.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap23 = aNN_PCT_CHG_pm25Forest18.getCompatibility();
        viewers.Viewer[] viewerArray24 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList25 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList25, viewerArray24);
        aNN_PCT_CHG_pm25Forest18.updateObservers(viewerList25);
        aNN_PCT_CHG_pm25Forest18.displayData();
        aNN_PCT_CHG_pm25Forest18.displayData();
        aNN_PCT_CHG_pm25Forest18.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest18.getCompatibility();
        boolean boolean32 = aNN_PCT_CHG_pm25Forest18.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest18.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest34 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList36);
        boolean boolean39 = aNN_PCT_CHG_pm25Forest34.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList48);
        boolean boolean52 = aNN_PCT_CHG_pm25Forest40.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap53 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList61);
        aNN_PCT_CHG_pm25Forest54.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest54.hasData();
        aNN_PCT_CHG_pm25Forest54.displayData();
        aNN_PCT_CHG_pm25Forest54.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest68 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray69 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList70 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList70, viewerArray69);
        aNN_PCT_CHG_pm25Forest68.updateObservers(viewerList70);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap73 = aNN_PCT_CHG_pm25Forest68.getCompatibility();
        viewers.Viewer[] viewerArray74 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList75 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList75, viewerArray74);
        aNN_PCT_CHG_pm25Forest68.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest18.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest4 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray5 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList6 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList6, viewerArray5);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList6);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest4.getCompatibility();
        viewers.Viewer[] viewerArray10 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList11 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList11, viewerArray10);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList11);
        aNN_PCT_CHG_pm25Forest4.displayData();
        aNN_PCT_CHG_pm25Forest4.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest4.getCompatibility();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest4.hasData();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList19);
        boolean boolean22 = aNN_PCT_CHG_pm25Forest4.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest23 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray24 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList25 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList25, viewerArray24);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList25);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList31);
        boolean boolean35 = aNN_PCT_CHG_pm25Forest23.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap42 = aNN_PCT_CHG_pm25Forest37.getCompatibility();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList44);
        aNN_PCT_CHG_pm25Forest37.displayData();
        boolean boolean48 = aNN_PCT_CHG_pm25Forest37.hasData();
        aNN_PCT_CHG_pm25Forest37.displayData();
        aNN_PCT_CHG_pm25Forest37.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList58);
        boolean boolean65 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap47 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest48 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList50);
        boolean boolean54 = aNN_PCT_CHG_pm25Forest42.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap55 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest56 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList58);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap61 = aNN_PCT_CHG_pm25Forest56.getCompatibility();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest56.displayData();
        boolean boolean67 = aNN_PCT_CHG_pm25Forest56.hasData();
        aNN_PCT_CHG_pm25Forest56.displayData();
        aNN_PCT_CHG_pm25Forest56.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap75 = aNN_PCT_CHG_pm25Forest70.getCompatibility();
        viewers.Viewer[] viewerArray76 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList77 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList77, viewerArray76);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList77);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList77);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList77);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap2 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap3 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap4 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest5 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest5.updateObservers(viewerList7);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap10 = aNN_PCT_CHG_pm25Forest5.getCompatibility();
        aNN_PCT_CHG_pm25Forest5.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest5.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest5.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest35 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest35.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest5.updateObservers(viewerList37);
        boolean boolean43 = aNN_PCT_CHG_pm25Forest5.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest44 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList46);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap49 = aNN_PCT_CHG_pm25Forest44.getCompatibility();
        viewers.Viewer[] viewerArray50 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList51 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList51, viewerArray50);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList51);
        aNN_PCT_CHG_pm25Forest44.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest55 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest55.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest57 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray58 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList59 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList59, viewerArray58);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList59);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap62 = aNN_PCT_CHG_pm25Forest57.getCompatibility();
        viewers.Viewer[] viewerArray63 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList64 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList64, viewerArray63);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest5.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList64);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap72 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap72);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest12.hasData();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap26 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap8 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap3 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean4 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        boolean boolean70 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.ArrayList<viewers.Viewer> viewerList71 = null;
        // The following exception was thrown during execution in test generation
        try {
            aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.lang.Class<?> wildcardClass19 = strMap18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest8.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest8.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest8.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList36);
        boolean boolean41 = aNN_PCT_CHG_pm25Forest16.hasData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest16.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        boolean boolean53 = aNN_PCT_CHG_pm25Forest43.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap54 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap55 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest56 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList58);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap61 = aNN_PCT_CHG_pm25Forest56.getCompatibility();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest56.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest67 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray68 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList69 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList69, viewerArray68);
        aNN_PCT_CHG_pm25Forest67.updateObservers(viewerList69);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap72 = aNN_PCT_CHG_pm25Forest67.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest73 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray74 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList75 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList75, viewerArray74);
        aNN_PCT_CHG_pm25Forest73.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest67.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest56.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList75);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList75);
        boolean boolean84 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        boolean boolean25 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        aNN_PCT_CHG_pm25Forest30.displayData();
        aNN_PCT_CHG_pm25Forest30.displayData();
        boolean boolean38 = aNN_PCT_CHG_pm25Forest30.hasData();
        aNN_PCT_CHG_pm25Forest30.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap47 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap26 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest28 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray29 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList30 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList30, viewerArray29);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList30);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap33 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest28.displayData();
        boolean boolean39 = aNN_PCT_CHG_pm25Forest28.hasData();
        aNN_PCT_CHG_pm25Forest28.displayData();
        boolean boolean41 = aNN_PCT_CHG_pm25Forest28.hasData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest28.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest28.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest44 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList46);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap49 = aNN_PCT_CHG_pm25Forest44.getCompatibility();
        viewers.Viewer[] viewerArray50 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList51 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList51, viewerArray50);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList51);
        aNN_PCT_CHG_pm25Forest44.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest55 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray56 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList57 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList57, viewerArray56);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList57);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap60 = aNN_PCT_CHG_pm25Forest55.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest61 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest28.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList63);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList33);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest13.hasData();
        boolean boolean39 = aNN_PCT_CHG_pm25Forest13.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest40 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray41 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList42 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList42, viewerArray41);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList42);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap45 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList47);
        boolean boolean50 = aNN_PCT_CHG_pm25Forest40.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest40.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest53 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList55);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap58 = aNN_PCT_CHG_pm25Forest53.getCompatibility();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList60);
        aNN_PCT_CHG_pm25Forest53.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest64 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray65 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList66 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList66, viewerArray65);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList66);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap69 = aNN_PCT_CHG_pm25Forest64.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest70 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest70.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest64.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest53.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest40.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean20 = aNN_PCT_CHG_pm25Forest14.hasData();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass27 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        boolean boolean20 = aNN_PCT_CHG_pm25Forest14.hasData();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        aNN_PCT_CHG_pm25Forest27.displayData();
        aNN_PCT_CHG_pm25Forest27.displayData();
        boolean boolean35 = aNN_PCT_CHG_pm25Forest27.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList39);
        java.lang.Class<?> wildcardClass44 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean2 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest4 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray5 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList6 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList6, viewerArray5);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList6);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest4.getCompatibility();
        viewers.Viewer[] viewerArray10 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList11 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList11, viewerArray10);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList11);
        aNN_PCT_CHG_pm25Forest4.displayData();
        aNN_PCT_CHG_pm25Forest4.displayData();
        aNN_PCT_CHG_pm25Forest4.displayData();
        aNN_PCT_CHG_pm25Forest4.displayData();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest4.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest19 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList21);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList26);
        aNN_PCT_CHG_pm25Forest19.displayData();
        aNN_PCT_CHG_pm25Forest19.displayData();
        aNN_PCT_CHG_pm25Forest19.displayData();
        boolean boolean32 = aNN_PCT_CHG_pm25Forest19.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest33.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest44 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList46);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap49 = aNN_PCT_CHG_pm25Forest44.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest50 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray51 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList52 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList52, viewerArray51);
        aNN_PCT_CHG_pm25Forest50.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest4.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList52);
        boolean boolean60 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean32 = aNN_PCT_CHG_pm25Forest25.hasData();
        boolean boolean33 = aNN_PCT_CHG_pm25Forest25.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest34 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList36);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest34.getCompatibility();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList41);
        aNN_PCT_CHG_pm25Forest34.displayData();
        aNN_PCT_CHG_pm25Forest34.displayData();
        aNN_PCT_CHG_pm25Forest34.displayData();
        aNN_PCT_CHG_pm25Forest34.displayData();
        boolean boolean48 = aNN_PCT_CHG_pm25Forest34.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest49 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray50 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList51 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList51, viewerArray50);
        aNN_PCT_CHG_pm25Forest49.updateObservers(viewerList51);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap54 = aNN_PCT_CHG_pm25Forest49.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest55 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray56 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList57 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList57, viewerArray56);
        aNN_PCT_CHG_pm25Forest55.updateObservers(viewerList57);
        aNN_PCT_CHG_pm25Forest49.updateObservers(viewerList57);
        aNN_PCT_CHG_pm25Forest34.updateObservers(viewerList57);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList57);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest23 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray24 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList25 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList25, viewerArray24);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList25);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList31);
        boolean boolean35 = aNN_PCT_CHG_pm25Forest23.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest23.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap42 = aNN_PCT_CHG_pm25Forest37.getCompatibility();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList44);
        aNN_PCT_CHG_pm25Forest37.displayData();
        boolean boolean48 = aNN_PCT_CHG_pm25Forest37.hasData();
        aNN_PCT_CHG_pm25Forest37.displayData();
        aNN_PCT_CHG_pm25Forest37.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest23.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList21);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest25.displayData();
        boolean boolean36 = aNN_PCT_CHG_pm25Forest25.hasData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        aNN_PCT_CHG_pm25Forest25.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest39 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray40 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList41 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList41, viewerArray40);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList41);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest39.getCompatibility();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest39.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList46);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList46);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest51.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest66 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList68);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap71 = aNN_PCT_CHG_pm25Forest66.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest66.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList74);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean81 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest19 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList21);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList27);
        boolean boolean31 = aNN_PCT_CHG_pm25Forest19.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest33.displayData();
        boolean boolean44 = aNN_PCT_CHG_pm25Forest33.hasData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean61 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        aNN_PCT_CHG_pm25Forest14.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest14.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest29 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray30 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList31 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList31, viewerArray30);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList31);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap34 = aNN_PCT_CHG_pm25Forest29.getCompatibility();
        viewers.Viewer[] viewerArray35 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList36 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList36, viewerArray35);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList36);
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        aNN_PCT_CHG_pm25Forest29.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest29.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap48 = aNN_PCT_CHG_pm25Forest43.getCompatibility();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList50);
        aNN_PCT_CHG_pm25Forest43.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap59 = aNN_PCT_CHG_pm25Forest54.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest29.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList62);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        aNN_PCT_CHG_pm25Forest15.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap28 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        boolean boolean29 = aNN_PCT_CHG_pm25Forest15.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        boolean boolean36 = aNN_PCT_CHG_pm25Forest31.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest37 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap42 = aNN_PCT_CHG_pm25Forest37.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest43 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray44 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList45 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList45, viewerArray44);
        aNN_PCT_CHG_pm25Forest43.updateObservers(viewerList45);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList45);
        boolean boolean49 = aNN_PCT_CHG_pm25Forest37.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap50 = aNN_PCT_CHG_pm25Forest37.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest51 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList53);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap56 = aNN_PCT_CHG_pm25Forest51.getCompatibility();
        viewers.Viewer[] viewerArray57 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList58 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList58, viewerArray57);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList58);
        aNN_PCT_CHG_pm25Forest51.displayData();
        boolean boolean62 = aNN_PCT_CHG_pm25Forest51.hasData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        aNN_PCT_CHG_pm25Forest51.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest65 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest65.updateObservers(viewerList67);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap70 = aNN_PCT_CHG_pm25Forest65.getCompatibility();
        viewers.Viewer[] viewerArray71 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList72 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList72, viewerArray71);
        aNN_PCT_CHG_pm25Forest65.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest51.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest37.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList72);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap6 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest12.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        boolean boolean41 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest19 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList21);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList27);
        boolean boolean31 = aNN_PCT_CHG_pm25Forest19.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest19.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap38 = aNN_PCT_CHG_pm25Forest33.getCompatibility();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList40);
        aNN_PCT_CHG_pm25Forest33.displayData();
        boolean boolean44 = aNN_PCT_CHG_pm25Forest33.hasData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        aNN_PCT_CHG_pm25Forest33.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest47 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList49);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap52 = aNN_PCT_CHG_pm25Forest47.getCompatibility();
        viewers.Viewer[] viewerArray53 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList54 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList54, viewerArray53);
        aNN_PCT_CHG_pm25Forest47.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest19.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList54);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass61 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean2 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap3 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean4 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest12.hasData();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList27);
        java.lang.Class<?> wildcardClass31 = viewerList27.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest17 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap22 = aNN_PCT_CHG_pm25Forest17.getCompatibility();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList24);
        aNN_PCT_CHG_pm25Forest17.displayData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        boolean boolean29 = aNN_PCT_CHG_pm25Forest17.hasData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest31.getCompatibility();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        boolean boolean45 = aNN_PCT_CHG_pm25Forest31.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest46 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray47 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList48 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList48, viewerArray47);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList48);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap51 = aNN_PCT_CHG_pm25Forest46.getCompatibility();
        viewers.Viewer[] viewerArray52 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList53 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList53, viewerArray52);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList53);
        aNN_PCT_CHG_pm25Forest46.displayData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        aNN_PCT_CHG_pm25Forest46.displayData();
        boolean boolean59 = aNN_PCT_CHG_pm25Forest46.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest60 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray61 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList62 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList62, viewerArray61);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList62);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap65 = aNN_PCT_CHG_pm25Forest60.getCompatibility();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest60.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest71 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray72 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList73 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList73, viewerArray72);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList73);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap76 = aNN_PCT_CHG_pm25Forest71.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest77 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest77.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest60.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest46.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList79);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap88 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap90 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap90);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest12.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest41 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray42 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList43 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList43, viewerArray42);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList43);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap46 = aNN_PCT_CHG_pm25Forest41.getCompatibility();
        boolean boolean47 = aNN_PCT_CHG_pm25Forest41.hasData();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest41.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest9 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray10 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList11 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList11, viewerArray10);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList11);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest9.getCompatibility();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList16);
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        aNN_PCT_CHG_pm25Forest9.displayData();
        boolean boolean23 = aNN_PCT_CHG_pm25Forest9.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest9.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        boolean boolean38 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean40 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean41 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap47 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest42.displayData();
        boolean boolean53 = aNN_PCT_CHG_pm25Forest42.hasData();
        aNN_PCT_CHG_pm25Forest42.displayData();
        boolean boolean55 = aNN_PCT_CHG_pm25Forest42.hasData();
        boolean boolean56 = aNN_PCT_CHG_pm25Forest42.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap57 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest58 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray59 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList60 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList60, viewerArray59);
        aNN_PCT_CHG_pm25Forest58.updateObservers(viewerList60);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap63 = aNN_PCT_CHG_pm25Forest58.getCompatibility();
        aNN_PCT_CHG_pm25Forest58.displayData();
        boolean boolean65 = aNN_PCT_CHG_pm25Forest58.hasData();
        viewers.Viewer[] viewerArray66 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList67 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList67, viewerArray66);
        aNN_PCT_CHG_pm25Forest58.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList67);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap14 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest15 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray16 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList17 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList17, viewerArray16);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList17);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap20 = aNN_PCT_CHG_pm25Forest15.getCompatibility();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList22);
        aNN_PCT_CHG_pm25Forest15.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest32 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest15.updateObservers(viewerList34);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest14 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray15 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList16 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList16, viewerArray15);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList16);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap19 = aNN_PCT_CHG_pm25Forest14.getCompatibility();
        viewers.Viewer[] viewerArray20 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList21 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList21, viewerArray20);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList21);
        aNN_PCT_CHG_pm25Forest14.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest25 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList27);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap30 = aNN_PCT_CHG_pm25Forest25.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest25.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest14.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap40 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest3 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray4 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList5 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList5, viewerArray4);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList5);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap8 = aNN_PCT_CHG_pm25Forest3.getCompatibility();
        aNN_PCT_CHG_pm25Forest3.displayData();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest3.hasData();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest17 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap22 = aNN_PCT_CHG_pm25Forest17.getCompatibility();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList24);
        aNN_PCT_CHG_pm25Forest17.displayData();
        boolean boolean28 = aNN_PCT_CHG_pm25Forest17.hasData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        aNN_PCT_CHG_pm25Forest17.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest31.getCompatibility();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList38);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList44);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest48 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray49 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList50 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList50, viewerArray49);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList50);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap53 = aNN_PCT_CHG_pm25Forest48.getCompatibility();
        viewers.Viewer[] viewerArray54 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList55 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList55, viewerArray54);
        aNN_PCT_CHG_pm25Forest48.updateObservers(viewerList55);
        aNN_PCT_CHG_pm25Forest17.updateObservers(viewerList55);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList55);
        java.lang.Class<?> wildcardClass60 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest11 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray12 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList13 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList13, viewerArray12);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList13);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest11.getCompatibility();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest11.updateObservers(viewerList18);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList18);
        java.lang.Class<?> wildcardClass22 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest13 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList15);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap18 = aNN_PCT_CHG_pm25Forest13.getCompatibility();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest13.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest24 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray25 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList26 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList26, viewerArray25);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList26);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap29 = aNN_PCT_CHG_pm25Forest24.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest24.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest13.updateObservers(viewerList32);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList32);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest38 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray39 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList40 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList40, viewerArray39);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList40);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap43 = aNN_PCT_CHG_pm25Forest38.getCompatibility();
        aNN_PCT_CHG_pm25Forest38.displayData();
        boolean boolean45 = aNN_PCT_CHG_pm25Forest38.hasData();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest38.updateObservers(viewerList47);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap1 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest3 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray4 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList5 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList5, viewerArray4);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList5);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap8 = aNN_PCT_CHG_pm25Forest3.getCompatibility();
        aNN_PCT_CHG_pm25Forest3.displayData();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest3.hasData();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest3.updateObservers(viewerList12);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList12);
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList19);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean7 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest8.getCompatibility();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList15);
        aNN_PCT_CHG_pm25Forest8.displayData();
        aNN_PCT_CHG_pm25Forest8.displayData();
        aNN_PCT_CHG_pm25Forest8.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest21 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList23);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap26 = aNN_PCT_CHG_pm25Forest21.getCompatibility();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest21.hasData();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList29);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest32 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray33 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList34 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList34, viewerArray33);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList34);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap37 = aNN_PCT_CHG_pm25Forest32.getCompatibility();
        viewers.Viewer[] viewerArray38 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList39 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList39, viewerArray38);
        aNN_PCT_CHG_pm25Forest32.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest21.updateObservers(viewerList39);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList39);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap44 = aNN_PCT_CHG_pm25Forest8.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest45 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest45.updateObservers(viewerList47);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap50 = aNN_PCT_CHG_pm25Forest45.getCompatibility();
        viewers.Viewer[] viewerArray51 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList52 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList52, viewerArray51);
        aNN_PCT_CHG_pm25Forest45.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest45.displayData();
        boolean boolean56 = aNN_PCT_CHG_pm25Forest45.hasData();
        aNN_PCT_CHG_pm25Forest45.displayData();
        aNN_PCT_CHG_pm25Forest45.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest59 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray60 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList61 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList61, viewerArray60);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList61);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap64 = aNN_PCT_CHG_pm25Forest59.getCompatibility();
        viewers.Viewer[] viewerArray65 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList66 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList66, viewerArray65);
        aNN_PCT_CHG_pm25Forest59.updateObservers(viewerList66);
        aNN_PCT_CHG_pm25Forest45.updateObservers(viewerList66);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList66);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList66);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap77 = aNN_PCT_CHG_pm25Forest72.getCompatibility();
        viewers.Viewer[] viewerArray78 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList79 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList79, viewerArray78);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList79);
        aNN_PCT_CHG_pm25Forest72.displayData();
        aNN_PCT_CHG_pm25Forest72.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap84 = aNN_PCT_CHG_pm25Forest72.getCompatibility();
        boolean boolean85 = aNN_PCT_CHG_pm25Forest72.hasData();
        viewers.Viewer[] viewerArray86 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList87 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList87, viewerArray86);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList87);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass13 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap16 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray14 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList15 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList15, viewerArray14);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList15);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean10 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean11 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.lang.Class<?> wildcardClass19 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        boolean boolean1 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest2 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray3 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList4 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList4, viewerArray3);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList4);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap7 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest8 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray9 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList10 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList10, viewerArray9);
        aNN_PCT_CHG_pm25Forest8.updateObservers(viewerList10);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList10);
        boolean boolean14 = aNN_PCT_CHG_pm25Forest2.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest2.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest16 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray17 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList18 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList18, viewerArray17);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList18);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest16.getCompatibility();
        viewers.Viewer[] viewerArray22 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList23 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList23, viewerArray22);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList23);
        aNN_PCT_CHG_pm25Forest16.displayData();
        boolean boolean27 = aNN_PCT_CHG_pm25Forest16.hasData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        aNN_PCT_CHG_pm25Forest16.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest30 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray31 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList32 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList32, viewerArray31);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList32);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap35 = aNN_PCT_CHG_pm25Forest30.getCompatibility();
        viewers.Viewer[] viewerArray36 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList37 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList37, viewerArray36);
        aNN_PCT_CHG_pm25Forest30.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest16.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest2.updateObservers(viewerList37);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList37);
        boolean boolean43 = aNN_PCT_CHG_pm25Forest0.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest44 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray45 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList46 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList46, viewerArray45);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList46);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap49 = aNN_PCT_CHG_pm25Forest44.getCompatibility();
        aNN_PCT_CHG_pm25Forest44.displayData();
        aNN_PCT_CHG_pm25Forest44.displayData();
        boolean boolean52 = aNN_PCT_CHG_pm25Forest44.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap53 = aNN_PCT_CHG_pm25Forest44.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest54 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray55 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList56 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList56, viewerArray55);
        aNN_PCT_CHG_pm25Forest54.updateObservers(viewerList56);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList56);
        aNN_PCT_CHG_pm25Forest44.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest61 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray62 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList63 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList63, viewerArray62);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList63);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap66 = aNN_PCT_CHG_pm25Forest61.getCompatibility();
        viewers.Viewer[] viewerArray67 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList68 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList68, viewerArray67);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList68);
        aNN_PCT_CHG_pm25Forest61.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap73 = aNN_PCT_CHG_pm25Forest72.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest74 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray75 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList76 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList76, viewerArray75);
        aNN_PCT_CHG_pm25Forest74.updateObservers(viewerList76);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap79 = aNN_PCT_CHG_pm25Forest74.getCompatibility();
        viewers.Viewer[] viewerArray80 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList81 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList81, viewerArray80);
        aNN_PCT_CHG_pm25Forest74.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest61.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest44.updateObservers(viewerList81);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        viewers.Viewer[] viewerArray18 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList19 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList19, viewerArray18);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList19);
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        aNN_PCT_CHG_pm25Forest12.displayData();
        boolean boolean26 = aNN_PCT_CHG_pm25Forest12.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest27 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList29);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap32 = aNN_PCT_CHG_pm25Forest27.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest33 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray34 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList35 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList35, viewerArray34);
        aNN_PCT_CHG_pm25Forest33.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest27.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList35);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap12 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.lang.Class<?> wildcardClass15 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        boolean boolean12 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean13 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest0.hasData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean19 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        viewers.Viewer[] viewerArray6 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList7 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList7, viewerArray6);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList7);
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap13 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean14 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean16 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        aNN_PCT_CHG_pm25Forest0.displayData();
        boolean boolean8 = aNN_PCT_CHG_pm25Forest0.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap9 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest10 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray11 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList12 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList12, viewerArray11);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList12);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap15 = aNN_PCT_CHG_pm25Forest10.getCompatibility();
        aNN_PCT_CHG_pm25Forest10.displayData();
        aNN_PCT_CHG_pm25Forest10.displayData();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest10.hasData();
        aNN_PCT_CHG_pm25Forest10.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest20 = new analyses.ANN_PCT_CHG_pm25Forest();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap21 = aNN_PCT_CHG_pm25Forest20.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest22 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray23 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList24 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList24, viewerArray23);
        aNN_PCT_CHG_pm25Forest22.updateObservers(viewerList24);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap27 = aNN_PCT_CHG_pm25Forest22.getCompatibility();
        viewers.Viewer[] viewerArray28 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList29 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList29, viewerArray28);
        aNN_PCT_CHG_pm25Forest22.updateObservers(viewerList29);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList29);
        aNN_PCT_CHG_pm25Forest10.updateObservers(viewerList29);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList29);
        aNN_PCT_CHG_pm25Forest0.displayData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest6 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest6.getCompatibility();
        viewers.Viewer[] viewerArray12 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList13 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList13, viewerArray12);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList13);
        aNN_PCT_CHG_pm25Forest6.displayData();
        boolean boolean17 = aNN_PCT_CHG_pm25Forest6.hasData();
        aNN_PCT_CHG_pm25Forest6.displayData();
        aNN_PCT_CHG_pm25Forest6.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest20 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray21 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList22 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList22, viewerArray21);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList22);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap25 = aNN_PCT_CHG_pm25Forest20.getCompatibility();
        viewers.Viewer[] viewerArray26 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList27 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList27, viewerArray26);
        aNN_PCT_CHG_pm25Forest20.updateObservers(viewerList27);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList27);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest31 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList33);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap36 = aNN_PCT_CHG_pm25Forest31.getCompatibility();
        viewers.Viewer[] viewerArray37 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList38 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList38, viewerArray37);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList38);
        aNN_PCT_CHG_pm25Forest31.displayData();
        boolean boolean42 = aNN_PCT_CHG_pm25Forest31.hasData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        aNN_PCT_CHG_pm25Forest31.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest45 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray46 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList47 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList47, viewerArray46);
        aNN_PCT_CHG_pm25Forest45.updateObservers(viewerList47);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap50 = aNN_PCT_CHG_pm25Forest45.getCompatibility();
        viewers.Viewer[] viewerArray51 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList52 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList52, viewerArray51);
        aNN_PCT_CHG_pm25Forest45.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest31.updateObservers(viewerList52);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList52);
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest57 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray58 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList59 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList59, viewerArray58);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList59);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap62 = aNN_PCT_CHG_pm25Forest57.getCompatibility();
        viewers.Viewer[] viewerArray63 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList64 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList64, viewerArray63);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest57.displayData();
        aNN_PCT_CHG_pm25Forest57.displayData();
        aNN_PCT_CHG_pm25Forest57.displayData();
        aNN_PCT_CHG_pm25Forest57.displayData();
        boolean boolean71 = aNN_PCT_CHG_pm25Forest57.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest72 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray73 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList74 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList74, viewerArray73);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList74);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap77 = aNN_PCT_CHG_pm25Forest72.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest78 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray79 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList80 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList80, viewerArray79);
        aNN_PCT_CHG_pm25Forest78.updateObservers(viewerList80);
        aNN_PCT_CHG_pm25Forest72.updateObservers(viewerList80);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList80);
        aNN_PCT_CHG_pm25Forest6.updateObservers(viewerList80);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList80);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap87 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean88 = aNN_PCT_CHG_pm25Forest0.hasData();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap5 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        boolean boolean6 = aNN_PCT_CHG_pm25Forest0.hasData();
        viewers.Viewer[] viewerArray7 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList8 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList8, viewerArray7);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList8);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap11 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest12 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray13 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList14 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList14, viewerArray13);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList14);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap17 = aNN_PCT_CHG_pm25Forest12.getCompatibility();
        boolean boolean18 = aNN_PCT_CHG_pm25Forest12.hasData();
        viewers.Viewer[] viewerArray19 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList20 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList20, viewerArray19);
        aNN_PCT_CHG_pm25Forest12.updateObservers(viewerList20);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList20);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap24 = aNN_PCT_CHG_pm25Forest0.getCompatibility();
        aNN_PCT_CHG_pm25Forest0.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest26 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray27 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList28 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList28, viewerArray27);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList28);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap31 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        viewers.Viewer[] viewerArray32 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList33 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList33, viewerArray32);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList33);
        aNN_PCT_CHG_pm25Forest26.displayData();
        aNN_PCT_CHG_pm25Forest26.displayData();
        aNN_PCT_CHG_pm25Forest26.displayData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap39 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        boolean boolean40 = aNN_PCT_CHG_pm25Forest26.hasData();
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap41 = aNN_PCT_CHG_pm25Forest26.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest42 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray43 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList44 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList44, viewerArray43);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList44);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap47 = aNN_PCT_CHG_pm25Forest42.getCompatibility();
        viewers.Viewer[] viewerArray48 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList49 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList49, viewerArray48);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList49);
        aNN_PCT_CHG_pm25Forest42.displayData();
        aNN_PCT_CHG_pm25Forest42.displayData();
        aNN_PCT_CHG_pm25Forest42.displayData();
        aNN_PCT_CHG_pm25Forest42.displayData();
        boolean boolean56 = aNN_PCT_CHG_pm25Forest42.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest57 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray58 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList59 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList59, viewerArray58);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList59);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap62 = aNN_PCT_CHG_pm25Forest57.getCompatibility();
        viewers.Viewer[] viewerArray63 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList64 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList64, viewerArray63);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList64);
        aNN_PCT_CHG_pm25Forest57.displayData();
        aNN_PCT_CHG_pm25Forest57.displayData();
        aNN_PCT_CHG_pm25Forest57.displayData();
        boolean boolean70 = aNN_PCT_CHG_pm25Forest57.hasData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest71 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray72 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList73 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList73, viewerArray72);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList73);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap76 = aNN_PCT_CHG_pm25Forest71.getCompatibility();
        viewers.Viewer[] viewerArray77 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList78 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList78, viewerArray77);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList78);
        aNN_PCT_CHG_pm25Forest71.displayData();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest82 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray83 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList84 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList84, viewerArray83);
        aNN_PCT_CHG_pm25Forest82.updateObservers(viewerList84);
        java.util.HashMap<java.lang.String, java.lang.Boolean> strMap87 = aNN_PCT_CHG_pm25Forest82.getCompatibility();
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest88 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray89 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList90 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList90, viewerArray89);
        aNN_PCT_CHG_pm25Forest88.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest82.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest71.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest57.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest42.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest26.updateObservers(viewerList90);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strMap87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        analyses.ANN_PCT_CHG_pm25Forest aNN_PCT_CHG_pm25Forest0 = new analyses.ANN_PCT_CHG_pm25Forest();
        viewers.Viewer[] viewerArray1 = new viewers.Viewer[] {};
        java.util.ArrayList<viewers.Viewer> viewerList2 = new java.util.ArrayList<viewers.Viewer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<viewers.Viewer>) viewerList2, viewerArray1);
        aNN_PCT_CHG_pm25Forest0.updateObservers(viewerList2);
        java.lang.Class<?> wildcardClass5 = aNN_PCT_CHG_pm25Forest0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(viewerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }
}

